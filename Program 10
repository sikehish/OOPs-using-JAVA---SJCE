//lab 10 
import java.util.Scanner;

/*Develop an application with an abstract Bank class consisting of below features:
        a) Bank_Type (National/International)
        b) getRoi() is an abstract method
        c) deposit()
        d) offerCreditCard
        ï‚· Identify various (atleast 4) banks which will extend bank class with below conditions:
        o If the bank is type of nationalized the roi is 7% else 8%. The interest is offered only if the term deposit is minimum of 3 years.
        o If the bank is international, then it can offer platinum credit card otherwise not.
        Override one of the method and use the concept of dynamic method dispatch.*/

abstract class bankp10{
    Scanner sc=new Scanner(System.in);
    String banktype,bankname;
     String s1= new String("international");
    String s2= new String("national");
    int year;
    double balance=0,x,cardlimit=-1,cardbal=0,card;
    abstract void getroi();
    void deposit()
    {

        System.out.println("Enter amount");
        x=sc.nextDouble();
        if(banktype.equals(s1))
        {
            double cardbill=cardlimit-cardbal;
            System.out.println("card bill= "+cardbill);
           // double y= cardlimit - cardbal;
            if(x<=cardbill)
            {
                cardbal+=x;
            }
            else
            {
                cardbal+=cardbill;
                 x-=cardbill  ;
                 balance+=x;
            }
        }
        else
        {
            balance+=x;
        }

        System.out.println("updated bal="+balance);
    }
    void debit(double x)
    {
        if(balance>=x)
        {
            balance=balance-x;
            System.out.println("updated bal="+balance);
        }
        else
        {
            if(banktype.equals(s1))
            {
                if(cardlimit==-1)
                {
                    System.out.println("insufficient balance\n initialize credit card card");
                }
                else if(cardlimit>=x)
                {
                    cardbal-=x;
                    System.out.println("deducted from card\nupdated bal="+balance);

                }
                else
                {
                    System.out.println("No money in account and card limit breaching");
                }
            }
            else{
                System.out.println("Insufficient balance\n ineligible for credit card");
            }
        }

    }
    void initialzie()
    {
        System.out.println("enter bank name");
         bankname=sc.next();
        System.out.println("Enter bank typen");
        banktype=sc.next();
        System.out.println("enter balance");
        balance= sc.nextDouble();
        System.out.println("enter year for depostion");
        year= sc.nextInt();
    }
    void offercard()
    {
        if (banktype.equals(s1))
        {
            System.out.println("eligible for platinum card");
            System.out.println("enter card spending limit");
            cardlimit= sc.nextDouble();
            cardbal=cardlimit;
        }
        else
        {
            System.out.println("Only interantional banks can issue card");
        }
    }

}
class superclass extends bankp10
{
    public void getroi()
    {
        if(year>=3)
        {
            if(banktype.equals(s1))
            {
                balance+= 0.07*year*balance;
            }
            else
            {
                balance+= 0.08*year*balance;
            }
        }
        else
        {
            System.out.println("Ineligigble for roi");
        }

    }
    void display()
    {
        System.out.println("Display of child1");
    }
}
class child extends superclass
{
         void display()
         {

             System.out.println(bankname+"\t"+banktype+"\t"+balance+"\t"+year+"\t"+cardbal);
         }
}
public class p10AbstractBank
{
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        System.out.println("enter no. of account holders");
        int n = sc.nextInt();
        superclass [] banks = new child[n];
        for (int i = 0; i < n; i++) {
            banks[i] = new child();
            banks[i].initialzie();
        }
        while (1 < 2) {
            System.out.print("Enter bank No. ");
            int no = sc.nextInt();
            no--;
            System.out.println("Enter choice\n1.Display\n2.deposit\n3.deduct\n4.offer card\n5.get roi\n6. exit");
            int ch=sc.nextInt();
            switch (ch)
            {
                case 1:
                    System.out.println("bank name\tbank type\tbalance\t year for deposi\tcardbalance");
                    for (int i = 0; i < n; i++)
                    {
                        banks[i].display();
                    }
                    break;
                case 2: banks[no].deposit();
                        break;
                case 3:
                    System.out.println("enter amount to deduct\n");
                    double deduct=sc.nextDouble();
                    banks[no].debit(deduct);
                    break;
                case 4:

                    banks[no].offercard();
                        break;
                case 5: banks[no].getroi();
                        break;
                case 6: System.exit(0);
                        break;
                default:
                    System.out.println("invalid input");
                        break;



            }
        }
    }

}
